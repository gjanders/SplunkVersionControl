[SplunkVersionControl ChangeDetector Non-Directory]
action.email.useNSSubject = 1
alert.track = 0
description = Detect changes to Splunk configuration based on a epoch, this covers the remainder of the knowledge objects not covered by SplunkVersionControl ChangeDetector Directory
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
request.ui_dispatch_app = VersionControl
request.ui_dispatch_view = search
search = | rest splunk_server=local /servicesNS/-/-/storage/collections/config count=0 f=updated f=eai:appName\
| eval type="kvstore"\
| append [ | rest splunk_server=local /servicesNS/-/-/datamodel/model count=0 f=updated f=eai:appName | eval type="datamodel" ]\
| append [ | rest splunk_server=local /servicesNS/-/-/data/ui/panels count=0 f=updated f=eai:appName | eval type="panels" ]\
| append [ | rest splunk_server=local /servicesNS/-/-/data/props/calcfields count=0 | table updated, eai:acl.app | rename eai:acl.app AS eai:appName | eval type="calcfields" ]\
| append [ | rest splunk_server=local /servicesNS/-/-/configs/conf-macros count=0 | table updated, eai:acl.app | rename eai:acl.app AS eai:appName | eval type="macros" ]\
| eval updatedEpoch=strptime(updated,"%Y-%m-%dT%H:%M:%S%:z")\
| where updatedEpoch > $updatedEpoch$\
| rename eai:appName AS app\
| stats count by type, app

[SplunkVersionControl ChangeDetector Directory]
action.email.useNSSubject = 1
alert.track = 0
description = Detect changes to Splunk configuration based on a epoch via the /services/directory REST API, this covers the majority but not all knowledge objects in Splunk
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
request.ui_dispatch_app = VersionControl
request.ui_dispatch_view = search
search = | rest "/servicesNS/-/-/directory" count=0 splunk_server=local \
| table updated, eai:type, eai:acl.app, eai:location\
| eval updatedEpoch=strptime(updated,"%Y-%m-%dT%H:%M:%S%:z")\
| where updatedEpoch > $updatedEpoch$\
| rename eai:type AS type, eai:acl.app AS app, eai:location AS location\
| stats count by type, app\
| fields - count

[SplunkVersionControl AddToLookup]
action.email.useNSSubject = 1
alert.track = 0
dispatch.earliest_time = -60m@m
dispatch.latest_time = now
display.events.fields = ["index","sourcetype","host","indextime","count","search_id","component","indexes","source"]
display.events.list.drilldown = none
display.events.list.wrap = 0
display.events.maxLines = 100
display.events.raw.drilldown = none
display.events.rowNumbers = 1
display.events.table.drilldown = 0
display.general.type = statistics
display.page.search.tab = statistics
display.statistics.drilldown = none
display.statistics.wrap = 0
display.visualizations.charting.chart = bar
display.visualizations.show = 0
request.ui_dispatch_app = monitoring
request.ui_dispatch_view = search
search = | makeresults \
| eval app="$app$", type="$type$", name="$name$", tag="$tag$", user="$user$", restoreAsUser="$restoreAsUser$", scope="$scope$"\
| eval time=strftime(_time,"%s")\
| fields - _time\
| outputlookup append=true splunkversioncontrol_restorelist

[SplunkVersionControl CheckAdmin]
action.email.useNSSubject = 1
alert.track = 0
description = Check if the user in question has admin level access or not
dispatch.earliest_time = -5m
dispatch.latest_time = now
display.events.fields = ["index","sourcetype","host","indextime","count","search_id","component","indexes","source"]
display.events.list.drilldown = none
display.events.list.wrap = 0
display.events.maxLines = 100
display.events.raw.drilldown = none
display.events.rowNumbers = 1
display.events.table.drilldown = 0
display.general.type = statistics
display.page.search.tab = statistics
display.statistics.drilldown = none
display.statistics.wrap = 0
display.visualizations.charting.chart = bar
display.visualizations.show = 0
request.ui_dispatch_app = monitoring
request.ui_dispatch_view = search
search = | rest /services/admin/LDAP-groups splunk_server=local \
| where isnotnull(roles) \
| search users IN ($ldapFilter$) roles=admin\
| mvexpand users\
| rex field=users "CN=(?P<username>[^,]+)"\
| append [ | rest /services/authentication/users splunk_server=local \
| search type=Splunk \
| table title, roles \
| rename title AS username \
| mvexpand roles\
| search roles=admin ]\
| search username IN ($usernameFilter$)\
| table username

[SplunkVersionControl Audit Query]
action.email.useNSSubject = 1
alert.track = 0
description = Checks the audit logs to ensure that when a restore is requested, it was requested through the correct mechanism (via the report, not randomly added to the lookup file as that could have a different username in there)
dispatch.earliest_time = -5m
dispatch.latest_time = now
display.events.fields = ["index","sourcetype","host"]
display.events.list.drilldown = none
display.events.list.wrap = 0
display.events.maxLines = 100
display.events.raw.drilldown = none
display.events.rowNumbers = 1
display.events.table.drilldown = 0
display.general.type = statistics
display.page.search.tab = statistics
display.statistics.drilldown = none
display.statistics.wrap = 0
display.visualizations.charting.chart = bar
display.visualizations.show = 0
request.ui_dispatch_app = monitoring
request.ui_dispatch_view = search
search = `comment("Query the audit logs to determine when the savedsearch was run that will update the lookup file. This information is used to ensure the update times match the actual updates to the lookup file...we don't want to restore based on manual lookup file updates as the user could be set to anyone in that file if edited manually!")` \
index=_audit "search='| savedsearch \"SplunkVersionControl AddToLookup\" app=" savedsearch_name="search*" action=search info=granted `searchheadhosts`\
| eval time=strftime(_time,"%s")\
| table time, user

[Splunk Version Control Audit Query POST]
action.email.useNSSubject = 1
alert.track = 0
description = Checks the audit logs to ensure that when a restore is requested, it was requested through the correct mechanism (via the command)
dispatch.earliest_time = -60m@m
dispatch.latest_time = now
display.events.fields = ["index","sourcetype","host"]
display.events.list.drilldown = none
display.events.list.wrap = 0
display.events.maxLines = 100
display.events.raw.drilldown = none
display.events.rowNumbers = 1
display.events.table.drilldown = 0
display.general.type = statistics
display.page.search.tab = statistics
display.statistics.drilldown = none
display.statistics.wrap = 0
display.visualizations.charting.chart = bar
display.visualizations.show = 0
request.ui_dispatch_app = SplunkVersionControl
request.ui_dispatch_view = search
search = `comment("Query the audit logs to determine if the command | postversioncontrolrestore was used to send a request through")` \
index=_audit action=search info=granted `comment("For prod: savedsearch_name=\"search*\"")` user="$username$" `searchheadhosts`\
| rex ", search='(?P<search>[\S+\s+]+?)', "\
| regex search="^\| postversioncontrolrestore "\
| eval time=strftime(_time,"%s")\
| table time, user
